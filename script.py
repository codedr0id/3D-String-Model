import bpy,bmesh

class Generator:

    '''
    Default constructor to initialise 26 different letters in the alphabet. Each letter is represented using 3 different lines.
    Each line is in the form of coordinates (axis1, axis2) where axis2 is the height. There are 6 different height levels.
    The height levels are -0.25, 0, 0.375, 0.625, 1, 1.25
    The rules for defining the coordinates of a letter are as follows :
        Each line should start from the 1st level (i.e. from -0.25) and should end at the 1st level.
        Each line should traverse every level first from level 1 to level 6 (in strictly increasing order) and then back to level 1 (in strictly decreasing order).
    These rules make the axis2 common for each line in every letter.
    '''
    def __init__(self):
        self.A_1 = [(0, -0.25), (0.3167, 0), (0.7917, 0.375), (0.7083, 0.625), (0.5833, 1), (0.5, 1.25), (0.4167, 1), (0.2917, 0.625), (0.2083, 0.375), (0.0833, 0), (0, -0.25)]
        self.A_2 = [(0, -0.25), (0.0833, 0), (0.2083, 0.375), (0.2917, 0.625), (0.4167, 1), (0.5, 1.25), (0.5833, 1), (0.7083, 0.625), (0.7917, 0.375), (0.9167, 0), (1, -0.25)]
        self.A_3 = [(1, -0.25), (0.9167, 0), (0.7917, 0.375), (0.7083, 0.625), (0.5833, 1), (0.5, 1.25), (0.5833, 1), (0.7083, 0.625), (0.7917, 0.375), (0.9167, 0), (1, -0.25)]

        self.B_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0.5, 1), (0, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.B_2 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0.7143, 0.375), (0.2857, 0), (0, -0.25)]
        self.B_3 = [(0, -0.25), (0.2857, 0), (0.7143, 0.375), (0, 0.625), (0.5, 1), (0, 1.25), (0.5, 1), (0, 0.625), (0.7143, 0.375), (0.2857, 0), (0, -0.25)]

        self.C_1 = [(1, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (1, -0.25)]
        self.C_2 = [(1, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (1, -0.25)]
        self.C_3 = [(1, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (1, -0.25)]

        self.D_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (0, -0.25)]
        self.D_2 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (0, -0.25)]
        self.D_3 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (0, -0.25)]

        self.E_1 = [(1, -0.25), (0, 0), (0.3, 0.375), (0.5, 0.625), (0, 1), (1, 1.25), (0, 1), (0.5, 0.625), (0.3, 0.375), (0, 0), (1, -0.25)]
        self.E_2 = [(1, -0.25), (0, 0), (0.3, 0.375), (0.5, 0.625), (0, 1), (1, 1.25), (0, 1), (0.5, 0.625), (0.3, 0.375), (0, 0), (1, -0.25)]
        self.E_3 = [(1, -0.25), (0, 0), (0.3, 0.375), (0.5, 0.625), (0, 1), (1, 1.25), (0, 1), (0.5, 0.625), (0.3, 0.375), (0, 0), (1, -0.25)]

        self.F_1 = [(0, -0.25), (0, 0), (0, 0.375), (0.5, 0.625), (0, 1), (1, 1.25), (0, 1), (0.5, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.F_2 = [(0, -0.25), (0, 0), (0, 0.375), (0.5, 0.625), (0, 1), (1, 1.25), (0, 1), (0.5, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.F_3 = [(0, -0.25), (0, 0), (0, 0.375), (0.5, 0.625), (0, 1), (1, 1.25), (0, 1), (0.5, 0.625), (0, 0.375), (0, 0), (0, -0.25)]

        self.G_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.G_2 = [(0, -0.25), (1, 0), (1, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (1, 0.375), (1, 0), (1, -0.25)]
        self.G_3 = [(1, -0.25), (1, 0), (1, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (1, 0.375), (1, 0), (1, -0.25)]

        self.H_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.H_2 = [(0, -0.25), (0, 0), (0, 0.375), (1, 0.625), (1, 1), (1, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (1, -0.25)]
        self.H_3 = [(1, -0.25), (1, 0), (1, 0.375), (1, 0.625), (1, 1), (1, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (1, -0.25)]

        self.I_1 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (0.5, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]
        self.I_2 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (0.5, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]
        self.I_3 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (0.5, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]

        self.J_1 = [(0, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (0, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0, -0.25)]
        self.J_2 = [(0, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (1, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0, -0.25)]
        self.J_3 = [(0, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (1, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0, -0.25)]

        self.K_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0.6, 1), (1, 1.25), (0.6, 1), (0, 0.625), (0.2857, 0.375), (0.7143, 0), (1, -0.25)]
        self.K_2 = [(1, -0.25), (0.7143, 0), (0.2857, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0.2857, 0.375), (0.7143, 0), (1, -0.25)]
        self.K_3 = [(1, -0.25), (0.7143, 0), (0.2857, 0.375), (0, 0.625), (0.6, 1), (1, 1.25), (0.6, 1), (0, 0.625), (0.2857, 0.375), (0.7143, 0), (1, -0.25)]

        self.L_1 = [(1, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (1, -0.25)]
        self.L_2 = [(1, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (1, -0.25)]
        self.L_3 = [(1, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (1, -0.25)]

        self.M_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0.0833, 1), (0.2083, 0.625), (0.2917, 0.375), (0.4167, 0), (0.5, -0.25)]
        self.M_2 = [(0.5, -0.25), (0.5833, 0), (0.7083, 0.375), (0.7917, 0.625), (0.9167, 1), (1, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (1, -0.25)]
        self.M_3 = [(1, -0.25), (1, 0), (1, 0.375), (1, 0.625), (1, 1), (1, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (1, -0.25)]

        self.N_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0.1667, 1), (0.4167, 0.625), (0.5833, 0.375), (0.8333, 0), (1, -0.25)]
        self.N_2 = [(1, -0.25), (1, 0), (1, 0.375), (1, 0.625), (1, 1), (1, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (1, -0.25)]
        self.N_3 = [(1, -0.25), (0.8333, 0), (0.5833, 0.375), (0.4167, 0.625), (0.1667, 1), (0, 1.25), (0.1667, 1), (0.4167, 0.625), (0.5833, 0.375), (0.8333, 0), (1, -0.25)]

        self.O_1 = [(0.5, -0.25), (0.3571, 0), (0.1429, 0.375), (0, 0.625), (0.3, 1), (0.5, 1.25), (0.7, 1), (1, 0.625), (0.8571, 0.375), (0.6429, 0), (0.5, -0.25)]
        self.O_2 = [(0.5, -0.25), (0.3571, 0), (0.1429, 0.375), (0, 0.625), (0.3, 1), (0.5, 1.25), (0.7, 1), (1, 0.625), (0.8571, 0.375), (0.6429, 0), (0.5, -0.25)]
        self.O_3 = [(0.5, -0.25), (0.3571, 0), (0.1429, 0.375), (0, 0.625), (0.3, 1), (0.5, 1.25), (0.7, 1), (1, 0.625), (0.8571, 0.375), (0.6429, 0), (0.5, -0.25)]

        self.P_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0.5, 1), (0, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.P_2 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0.5, 1), (0, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.P_3 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (0, -0.25)]

        self.Q_1 = [(0.5, -0.25), (0.3571, 0), (0.1429, 0.375), (0, 0.625), (0.3, 1), (0.5, 1.25), (0.7, 1), (1, 0.625), (0.8571, 0.375), (0.6429, 0), (0.5, -0.25)]
        self.Q_2 = [(0.5, -0.25), (0.3571, 0), (0.1429, 0.375), (0, 0.625), (0.3, 1), (0.5, 1.25), (0.7, 1), (1, 0.625), (0.8571, 0.375), (0.6429, 0), (1, -0.25)]
        self.Q_3 = [(1, -0.25), (0.6429, 0), (0.8571, 0.375), (1, 0.625), (0.7, 1), (0.5, 1.25), (0.7, 1), (1, 0.625), (0.8571, 0.375), (0.6429, 0), (1, -0.25)]

        self.R_1 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0.5, 1), (0.5, 0.625), (0, 0.375), (0, 0), (0, -0.25)]
        self.R_2 = [(0, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0.5, 1), (0.5, 0.625), (0, 0.375), (0.6, 0), (1, -0.25)]
        self.R_3 = [(1, -0.25), (0.6, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0.6, 0), (1, -0.25)]

        self.S_1 = [(0, -0.25), (1, 0), (1, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (1, 0.375), (1, 0), (0, -0.25)]
        self.S_2 = [(0, -0.25), (1, 0), (1, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (1, 0.375), (1, 0), (0, -0.25)]
        self.S_3 = [(0, -0.25), (1, 0), (1, 0.375), (0, 0.625), (0, 1), (1, 1.25), (0, 1), (0, 0.625), (1, 0.375), (1, 0), (0, -0.25)]

        self.T_1 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (0, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]
        self.T_2 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (1, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]
        self.T_3 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.5, 1), (0.5, 1.25), (0.5, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]

        self.U_1 = [(0.5, -0.25), (0, 0), (0, 0.375), (0, 0.625), (0, 1), (0, 1.25), (0, 1), (0, 0.625), (0, 0.375), (0, 0), (0.5, -0.25)]
        self.U_2 = [(0.5, -0.25), (1, 0), (1, 0.375), (1, 0.625), (1, 1), (1, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (1, -0.25)]
        self.U_3 = [(1, -0.25), (1, 0), (1, 0.375), (1, 0.625), (1, 1), (1, 1.25), (1, 1), (1, 0.625), (1, 0.375), (1, 0), (1, -0.25)]

        self.V_1 = [(0.5, -0.25), (0.4167, 0), (0.2917, 0.375), (0.2083, 0.625), (0.0833, 1), (0, 1.25), (0.0833, 1), (0.2083, 0.625), (0.2917, 0.375), (0.4167, 0), (0.5, -0.25)]
        self.V_2 = [(0.5, -0.25), (0.5833, 0), (0.7083, 0.375), (0.7917, 0.625), (0.9167, 1), (1, 1.25), (0.9167, 1), (0.7917, 0.625), (0.7083, 0.375), (0.5833, 0), (0.5, -0.25)]
        self.V_3 = [(0.5, -0.25), (0.5833, 0), (0.7083, 0.375), (0.7917, 0.625), (0.9167, 1), (1, 1.25), (0.9167, 1), (0.7917, 0.625), (0.7083, 0.375), (0.5833, 0), (0.5, -0.25)]

        self.W_1 = [(0.25, -0.25), (0.2083, 0), (0.1458, 0.375), (0.1042, 0.625), (0.0417, 1), (0, 1.25), (0.0417, 1), (0.1042, 0.625), (0.1458, 0.375), (0.2083, 0), (0.25, -0.25)]
        self.W_2 = [(0.25, -0.25), (0.2917, 0), (0.3542, 0.375), (0.3958, 0.625), (0.4583, 1), (0.5, 1.25), (0.5417, 1), (0.6042, 0.625), (0.6458, 0.375), (0.7083, 0), (0.75, -0.25)]
        self.W_3 = [(0.75, -0.25), (0.7917, 0), (0.8542, 0.375), (0.8958, 0.625), (0.9853, 1), (1, 1.25), (0.9853, 1), (0.8958, 0.625), (0.8542, 0.375), (0.7917, 0), (0.75, -0.25)]

        self.X_1 = [(0, -0.25), (0.0429, 0), (0.3571, 0.375), (0.5, 0.625), (0.2857, 1), (0.1429, 6), (0.2857, 1), (0.5, 0.625), (0.6429, 0.375), (0.8571, 0), (1, -0.25)]
        self.X_2 = [(1, -0.25), (0.8571, 0), (0.6429, 0.375), (0.5, 0.625), (0.7143, 1), (0.8571, 6), (0.7143, 1), (0.5, 0.625), (0.6429, 0.375), (0.8571, 0), (1, -0.25)]
        self.X_3 = [(1, -0.25), (0.8571, 0), (0.6429, 0.375), (0.5, 0.625), (0.2857, 1), (0.1429, 6), (0.2857, 1), (0.5, 0.625), (0.6429, 0.375), (0.8571, 0), (1, -0.25)]

        self.Y_1 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.2857, 1), (0.1429, 1.25), (0.2857, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]
        self.Y_2 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.7143, 1), (0.8517, 1.25), (0.7143, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]
        self.Y_3 = [(0.5, -0.25), (0.5, 0), (0.5, 0.375), (0.5, 0.625), (0.7143, 1), (0.8517, 1.25), (0.7143, 1), (0.5, 0.625), (0.5, 0.375), (0.5, 0), (0.5, -0.25)]

        self.Z_1 = [(1, -0.25), (0, 0), (0, 0.375), (1, 0.625), (1, 1), (0, 1.25), (1, 1), (1, 0.625), (0, 0.375), (0, 0), (1, -0.25)]
        self.Z_2 = [(1, -0.25), (0, 0), (0, 0.375), (1, 0.625), (1, 1), (0, 1.25), (1, 1), (1, 0.625), (0, 0.375), (0, 0), (1, -0.25)]
        self.Z_3 = [(1, -0.25), (0, 0), (0, 0.375), (1, 0.625), (1, 1), (0, 1.25), (1, 1), (1, 0.625), (0, 0.375), (0, 0), (1, -0.25)]

    # The replace method is used to replace a value from a tuple.
    def replace(self, tup, ind, val):
        return tup[:ind] + (val,) + tup[ind+1:]

    # The generate_coords method is used to merge the three lines used to represent a letter.
    def generate_coords(self, line_1, line_2, line_3):
        A = []
        for i in range(0, 11, 1):
            A.append(line_1[i])
        for i in range(1, 11, 1):
            A.append(line_2[i])
        for i in range(1, 11, 1):
            A.append(line_3[i])
        return A

    # The get_respective_coords method identifies which letter is chosen and it returns the respective coordinates' list.
    def get_respective_coords(self, a):
        if a == "a" or a == "A":
            return self.generate_coords(self.A_1, self.A_2, self.A_3)
        elif a == "b" or a == "B":
            return self.generate_coords(self.B_1, self.B_2, self.B_3)
        elif a == "c" or a == "C":
            return self.generate_coords(self.C_1, self.C_2, self.C_3)
        elif a == "d" or a == "D":
            return self.generate_coords(self.D_1, self.D_2, self.D_3)
        elif a == "e" or a == "E":
            return self.generate_coords(self.E_1, self.E_2, self.E_3)
        elif a == "f" or a == "F":
            return self.generate_coords(self.F_1, self.F_2, self.F_3)
        elif a == "g" or a == "G":
            return self.generate_coords(self.G_1, self.G_2, self.G_3)
        elif a == "h" or a == "H":
            return self.generate_coords(self.H_1, self.H_2, self.H_3)
        elif a == "i" or a == "I":
            return self.generate_coords(self.I_1, self.I_2, self.I_3)
        elif a == "j" or a == "J":
            return self.generate_coords(self.J_1, self.J_2, self.J_3)
        elif a == "k" or a == "K":
            return self.generate_coords(self.K_1, self.K_2, self.K_3)
        elif a == "l" or a == "L":
            return self.generate_coords(self.L_1, self.L_2, self.L_3)
        elif a == "m" or a == "M":
            return self.generate_coords(self.M_1, self.M_2, self.M_3)
        elif a == "n" or a == "N":
            return self.generate_coords(self.N_1, self.N_2, self.N_3)
        elif a == "o" or a == "O":
            return self.generate_coords(self.O_1, self.O_2, self.O_3)
        elif a == "p" or a == "P":
            return self.generate_coords(self.P_1, self.P_2, self.P_3)
        elif a == "q" or a == "Q":
            return self.generate_coords(self.Q_1, self.Q_2, self.Q_3)
        elif a == "r" or a == "R":
            return self.generate_coords(self.R_1, self.R_2, self.R_3)
        elif a == "s" or a == "S":
            return self.generate_coords(self.S_1, self.S_2, self.S_3)
        elif a == "t" or a == "T":
            return self.generate_coords(self.T_1, self.T_2, self.T_3)
        elif a == "u" or a == "U":
            return self.generate_coords(self.U_1, self.U_2, self.U_3)
        elif a == "v" or a == "V":
            return self.generate_coords(self.V_1, self.V_2, self.V_3)
        elif a == "w" or a == "W":
            return self.generate_coords(self.W_1, self.W_2, self.W_3)
        elif a == "x" or a == "X":
            return self.generate_coords(self.X_1, self.X_2, self.X_3)
        elif a == "y" or a == "Y":
            return self.generate_coords(self.Y_1, self.Y_2, self.Y_3)
        elif a == "z" or a == "Z":
            return self.generate_coords(self.Z_1, self.Z_2, self.Z_3)
        else:
            raise ValueError('Only letters of the English alphabet are allowed!')

    # The fuse method combines the list of coordinates of 2 letters in such a way that the 1st element in each tuple is a component of the 1st letter,
    # the 2nd element is the component of the 2nd letter and the 3rd element is the height component.
    def fuse(self, arr1, arr2):
        arr = []
        for i in range (0, len(arr1), 1):
            arr.append((arr1[i][0], arr2[i][0], arr1[i][1]))
        return arr

    # The set_offset method is used because until now, each letter was starting from origin but if there is come letter present before the current letter
    # then the 1st and the 2nd element has to be shifted by some offset.
    def set_offset(self, arr, offset):
        array = []      # <- <- <- <- <- <- <- CAN REMOVE THIS LINE
        for i in range(len(arr)):
            tup1 = arr[i]
            tup1 = self.replace(tup1, 0, tup1[0]+offset)
            tup1 = self.replace(tup1, 1, tup1[1]+offset)
            arr[i] = tup1
        return arr

    # This is the method where the coordinates of each pair of letters are merged in a list.
    def start(self, a, b):
        array = []
        if not len(a) == len(b):
            raise ValueError('Both words are of different length! Enter same length words.')
        for i in range(len(a)):
            char_a = a[i]
            char_b = b[i]
            arr1 = self.get_respective_coords(char_a)
            arr2 = self.get_respective_coords(char_b)
            arr = self.fuse(arr1, arr2)
            arr = self.set_offset(arr, i + 0.25*i)
            for j in arr:
                array.append(j)
        return array

def get_coords(a):
    return [(a[0],a[1],a[2]),(a[0]+0.125,a[1],a[2]),(a[0]+0.125,a[1]+0.125,a[2]),(a[0],a[1]+0.125,a[2])]

off1 = 0.125
off2 = 0.0625

print("Starting program ...")
print("Enter 2 words of same length.")
str1 = input("1st word :")
str2 = input("2nd word :")

object = Generator()
Ver = object.start(str1, str2)

verts = []
i = 0
while (i < len(Ver)):
    a = get_coords(Ver[i])
    for x in a:
        verts.append(x)
    i = i+1
#----------------verts done----------------
length = len(Ver)
i = 0
faces = []
while(i < length):
    faces.append((4*i, 4*i+1, 4*i+2, 4*i+3))
    i+=1
i = 0
for x in range(0,length-1,1):
    i = 0
    while(i < 3):
        faces.append((i+(4*x), i+1+(4*x), i+5+(4*x), i+4+(4*x)))
        i+=1
    faces.append((3+(4*x),0+(4*x),4+(4*x),7+(4*x)))
#----------------faces done----------------
#verts = [(0,0,0),(1,0,0),(1,1,0),(0,1,0),(0,0,1),(1,0,1),(1,1,1),(0,1,1)]
edges = [()]
#faces = [(0,1,5,4)]

mesh = bpy.data.meshes.new("mesh")
mesh.from_pydata(verts, edges, faces)
obj = bpy.data.objects.new("MyObject",mesh)

scene = bpy.context.scene
bpy.context.collection.objects.link(obj)
bpy.context.view_layer.objects.active = obj